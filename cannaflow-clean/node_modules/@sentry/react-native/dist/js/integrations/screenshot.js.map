{"version":3,"file":"screenshot.js","sourceRoot":"","sources":["../../../src/js/integrations/screenshot.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AAGpD,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAEpC,uCAAuC;AACvC,MAAM,OAAO,UAAU;IAAvB;QAME;;WAEG;QACI,SAAI,GAAW,UAAU,CAAC,EAAE,CAAC;IAyCtC,CAAC;IAvCC;;;;OAIG;IACI,MAAM,CAAC,2BAA2B,CACvC,IAAe,EACf,EAAE,gBAAgB,EAAkC;QAEpD,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;SAClC;QAED,OAAO,MAAM,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACnD,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClD,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,WAAW,EAAE,GAAG,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,KAAI,EAAE,CAAC,CAAC,CAAC;aACnE;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,SAAS,CAAC,uBAAoD;QACnE,uBAAuB,CAAC,CAAO,KAAY,EAAE,IAAe,EAAE,EAAE;YAC9D,MAAM,YAAY,GAAG,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACpG,IAAI,CAAC,YAAY,EAAE;gBACjB,OAAO,KAAK,CAAC;aACd;YAED,MAAM,WAAW,GAAkC,MAAM,MAAM,CAAC,iBAAiB,EAAE,CAAC;YACpF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzC,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,WAAW,EAAE,GAAG,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,KAAI,EAAE,CAAC,CAAC,CAAC;aACnE;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;;AAhDD;;GAEG;AACW,aAAE,GAAW,YAAY,CAAC","sourcesContent":["import type { Event, EventHint, EventProcessor, Integration } from '@sentry/types';\nimport { resolvedSyncPromise } from '@sentry/utils';\n\nimport type { Screenshot as ScreenshotAttachment } from '../wrapper';\nimport { NATIVE } from '../wrapper';\n\n/** Adds screenshots to error events */\nexport class Screenshot implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Screenshot';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Screenshot.id;\n\n  /**\n   * If enabled attaches a screenshot to the event hint.\n   *\n   * @deprecated Screenshots are now added in global event processor.\n   */\n  public static attachScreenshotToEventHint(\n    hint: EventHint,\n    { attachScreenshot }: { attachScreenshot?: boolean },\n  ): PromiseLike<EventHint> {\n    if (!attachScreenshot) {\n      return resolvedSyncPromise(hint);\n    }\n\n    return NATIVE.captureScreenshot().then(screenshots => {\n      if (screenshots !== null && screenshots.length > 0) {\n        hint.attachments = [...screenshots, ...(hint?.attachments || [])];\n      }\n      return hint;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (e: EventProcessor) => void): void {\n    addGlobalEventProcessor(async (event: Event, hint: EventHint) => {\n      const hasException = event.exception && event.exception.values && event.exception.values.length > 0;\n      if (!hasException) {\n        return event;\n      }\n\n      const screenshots: ScreenshotAttachment[] | null = await NATIVE.captureScreenshot();\n      if (screenshots && screenshots.length > 0) {\n        hint.attachments = [...screenshots, ...(hint?.attachments || [])];\n      }\n\n      return event;\n    });\n  }\n}\n"]}