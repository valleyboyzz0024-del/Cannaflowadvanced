import { __awaiter } from "tslib";
import { resolvedSyncPromise } from '@sentry/utils';
import { NATIVE } from '../wrapper';
/** Adds screenshots to error events */
export class Screenshot {
    constructor() {
        /**
         * @inheritDoc
         */
        this.name = Screenshot.id;
    }
    /**
     * If enabled attaches a screenshot to the event hint.
     *
     * @deprecated Screenshots are now added in global event processor.
     */
    static attachScreenshotToEventHint(hint, { attachScreenshot }) {
        if (!attachScreenshot) {
            return resolvedSyncPromise(hint);
        }
        return NATIVE.captureScreenshot().then(screenshots => {
            if (screenshots !== null && screenshots.length > 0) {
                hint.attachments = [...screenshots, ...((hint === null || hint === void 0 ? void 0 : hint.attachments) || [])];
            }
            return hint;
        });
    }
    /**
     * @inheritDoc
     */
    setupOnce(addGlobalEventProcessor) {
        addGlobalEventProcessor((event, hint) => __awaiter(this, void 0, void 0, function* () {
            const hasException = event.exception && event.exception.values && event.exception.values.length > 0;
            if (!hasException) {
                return event;
            }
            const screenshots = yield NATIVE.captureScreenshot();
            if (screenshots && screenshots.length > 0) {
                hint.attachments = [...screenshots, ...((hint === null || hint === void 0 ? void 0 : hint.attachments) || [])];
            }
            return event;
        }));
    }
}
/**
 * @inheritDoc
 */
Screenshot.id = 'Screenshot';
//# sourceMappingURL=screenshot.js.map