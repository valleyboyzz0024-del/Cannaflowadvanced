{"version":3,"file":"nativelinkederrors.js","sourceRoot":"","sources":["../../../src/js/integrations/nativelinkederrors.ts"],"names":[],"mappings":"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","sourcesContent":["import { exceptionFromError } from '@sentry/browser';\nimport type {\n  DebugImage,\n  Event,\n  EventHint,\n  EventProcessor,\n  Exception,\n  ExtendedError,\n  Hub,\n  Integration,\n  StackFrame,\n  StackParser,\n} from '@sentry/types';\nimport { isInstanceOf, isPlainObject } from '@sentry/utils';\n\nimport type { NativeStackFrames } from '../NativeRNSentry';\nimport { NATIVE } from '../wrapper';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/**\n * Processes JS and RN native linked errors.\n */\nexport class NativeLinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'NativeLinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = NativeLinkedErrors.id;\n\n  private readonly _key: LinkedErrorsOptions['key'];\n  private readonly _limit: LinkedErrorsOptions['limit'];\n  private _nativePackage: string | null = null;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const client = getCurrentHub().getClient();\n    if (!client) {\n      return;\n    }\n\n    addGlobalEventProcessor(async (event: Event, hint?: EventHint) => {\n      if (this._nativePackage === null) {\n        this._nativePackage = await this._fetchNativePackage();\n      }\n      const self = getCurrentHub().getIntegration(NativeLinkedErrors);\n      return self ? this._handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n\n  /**\n   * Enriches passed event with linked exceptions and native debug meta images.\n   */\n  private async _handler(\n    parser: StackParser,\n    key: string,\n    limit: number,\n    event: Event,\n    hint?: EventHint,\n  ): Promise<Event | null> {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const { exceptions: linkedErrors, debugImages } = await this._walkErrorTree(\n      parser,\n      limit,\n      hint.originalException as ExtendedError,\n      key,\n    );\n    event.exception.values = [...event.exception.values, ...linkedErrors];\n\n    event.debug_meta = event.debug_meta || {};\n    event.debug_meta.images = event.debug_meta.images || [];\n    event.debug_meta.images.push(...(debugImages || []));\n\n    return event;\n  }\n\n  /**\n   * Walks linked errors and created Sentry exceptions chain.\n   * Collects debug images from native errors stack frames.\n   */\n  private async _walkErrorTree(\n    parser: StackParser,\n    limit: number,\n    error: ExtendedError,\n    key: string,\n    exceptions: Exception[] = [],\n    debugImages: DebugImage[] = [],\n  ): Promise<{\n    exceptions: Exception[];\n    debugImages?: DebugImage[];\n  }> {\n    const linkedError = error[key];\n    if (!linkedError || exceptions.length + 1 >= limit) {\n      return {\n        exceptions,\n        debugImages,\n      };\n    }\n\n    let exception: Exception;\n    let exceptionDebugImages: DebugImage[] | undefined;\n    if ('stackElements' in linkedError) {\n      // isJavaException\n      exception = this._exceptionFromJavaStackElements(linkedError);\n    } else if ('stackReturnAddresses' in linkedError) {\n      // isObjCException\n      const { appleException, appleDebugImages } = await this._exceptionFromAppleStackReturnAddresses(linkedError);\n      exception = appleException;\n      exceptionDebugImages = appleDebugImages;\n    } else if (isInstanceOf(linkedError, Error)) {\n      exception = exceptionFromError(parser, error[key]);\n    } else if (isPlainObject(linkedError)) {\n      exception = {\n        type: typeof linkedError.name === 'string' ? linkedError.name : undefined,\n        value: typeof linkedError.message === 'string' ? linkedError.message : undefined,\n      };\n    } else {\n      return {\n        exceptions,\n        debugImages,\n      };\n    }\n\n    return this._walkErrorTree(\n      parser,\n      limit,\n      linkedError,\n      key,\n      [...exceptions, exception],\n      [...debugImages, ...(exceptionDebugImages || [])],\n    );\n  }\n\n  /**\n   * Converts a Java Throwable to an SentryException\n   */\n  private _exceptionFromJavaStackElements(javaThrowable: {\n    name: string;\n    message: string;\n    stackElements: {\n      className: string;\n      fileName: string;\n      methodName: string;\n      lineNumber: number;\n    }[];\n  }): Exception {\n    return {\n      type: javaThrowable.name,\n      value: javaThrowable.message,\n      stacktrace: {\n        frames: javaThrowable.stackElements\n          .map(\n            stackElement =>\n              <StackFrame>{\n                platform: 'java',\n                module: stackElement.className,\n                filename: stackElement.fileName,\n                lineno: stackElement.lineNumber >= 0 ? stackElement.lineNumber : undefined,\n                function: stackElement.methodName,\n                in_app:\n                  this._nativePackage !== null && stackElement.className.startsWith(this._nativePackage)\n                    ? true\n                    : undefined,\n              },\n          )\n          .reverse(),\n      },\n    };\n  }\n\n  /**\n   * Converts StackAddresses to a SentryException with DebugMetaImages\n   */\n  private async _exceptionFromAppleStackReturnAddresses(objCException: {\n    name: string;\n    message: string;\n    stackReturnAddresses: number[];\n  }): Promise<{\n    appleException: Exception;\n    appleDebugImages: DebugImage[];\n  }> {\n    const nativeStackFrames = await this._fetchNativeStackFrames(objCException.stackReturnAddresses);\n\n    return {\n      appleException: {\n        type: objCException.name,\n        value: objCException.message,\n        stacktrace: {\n          frames: (nativeStackFrames && nativeStackFrames.frames.reverse()) || [],\n        },\n      },\n      appleDebugImages: (nativeStackFrames && (nativeStackFrames.debugMetaImages as DebugImage[])) || [],\n    };\n  }\n\n  /**\n   * Fetches the native package/image name from the native layer\n   */\n  private _fetchNativePackage(): Promise<string | null> {\n    return NATIVE.fetchNativePackageName();\n  }\n\n  /**\n   * Fetches native debug image information on iOS\n   */\n  private _fetchNativeStackFrames(instructionsAddr: number[]): Promise<NativeStackFrames | null> {\n    return NATIVE.fetchNativeStackFramesBy(instructionsAddr);\n  }\n}\n"]}