{"version":3,"file":"reactnativeprofiler.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnativeprofiler.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAExD,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAE1D;;GAEG;AACH,MAAM,OAAO,mBAAoB,SAAQ,QAAQ;IAAjD;;QACkB,SAAI,GAAW,qBAAqB,CAAC;IA0BvD,CAAC;IAxBC;;OAEG;IACI,iBAAiB;QACtB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,MAAM,GAAG,GAAG,aAAa,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;QAE/B,IAAI,CAAC,MAAM,EAAE;YACX,iFAAiF;YACjF,sCAAsC;YACtC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,sFAAsF,CAAC,CAAC;YAChH,OAAO;SACR;QAED,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7E,MAAM,kBAAkB,GAAG,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QAClE,kBAAkB;eACb,IAAI,CAAC,UAAU;eACf,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,KAAK,WAAW;YACtD,0DAA0D;eACvD,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACzE,CAAC;CACF","sourcesContent":["import { getCurrentHub, Profiler } from '@sentry/react';\n\nimport { createIntegration } from '../integrations/factory';\nimport { ReactNativeTracing } from './reactnativetracing';\n\n/**\n * Custom profiler for the React Native app root.\n */\nexport class ReactNativeProfiler extends Profiler {\n  public readonly name: string = 'ReactNativeProfiler';\n\n  /**\n   * Get the app root mount time.\n   */\n  public componentDidMount(): void {\n    super.componentDidMount();\n    const hub = getCurrentHub();\n    const client = hub.getClient();\n\n    if (!client) {\n      // We can't use logger here because this will be logged before the `Sentry.init`.\n      // eslint-disable-next-line no-console\n      __DEV__ && console.warn('App Start Span could not be finished. `Sentry.wrap` was called before `Sentry.init`.');\n      return;\n    }\n\n    client.addIntegration && client.addIntegration(createIntegration(this.name));\n\n    const tracingIntegration = hub.getIntegration(ReactNativeTracing);\n    tracingIntegration\n      && this._mountSpan\n      && typeof this._mountSpan.endTimestamp !== 'undefined'\n      // The first root component mount is the app start finish.\n      && tracingIntegration.onAppStartFinish(this._mountSpan.endTimestamp);\n  }\n}\n"]}