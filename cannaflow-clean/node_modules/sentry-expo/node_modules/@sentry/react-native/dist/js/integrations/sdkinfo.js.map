{"version":3,"file":"sdkinfo.js","sourceRoot":"","sources":["../../../src/js/integrations/sdkinfo.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AACrE,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAIpC,MAAM,CAAC,MAAM,cAAc,GAAmB;IAC5C,IAAI,EAAE,QAAQ;IACd,QAAQ,EAAE;QACR;YACE,IAAI,EAAE,gBAAgB;YACtB,OAAO,EAAE,WAAW;SACrB;KACF;IACD,OAAO,EAAE,WAAW;CACrB,CAAC;AAEF,sCAAsC;AACtC,MAAM,OAAO,OAAO;IAApB;QAME;;WAEG;QACI,SAAI,GAAW,OAAO,CAAC,EAAE,CAAC;QAEzB,sBAAiB,GAAmB,IAAI,CAAC;IAkCnD,CAAC;IAhCC;;OAEG;IACI,SAAS,CAAC,uBAAoD;QACnE,uBAAuB,CAAC,CAAM,KAAK,EAAC,EAAE;YACpC,2GAA2G;YAC3G,+FAA+F;YAC/F,IAAI,MAAM,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;gBAChE,IAAI;oBACF,IAAI,CAAC,iBAAiB,GAAG,MAAM,MAAM,CAAC,kBAAkB,EAAE,CAAC;iBAC5D;gBAAC,OAAO,CAAC,EAAE;oBACV,qGAAqG;oBACrG,MAAM,CAAC,IAAI,CACT,sGAAsG,CACvG,CAAC;oBACF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAChB;aACF;YAED,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,YAAY,CAAC;YAChD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC;YAC5B,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,cAAc,CAAC,IAAI,CAAC;YACvD,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC;YAChE,KAAK,CAAC,GAAG,CAAC,QAAQ,GAAG;gBACnB,wEAAwE;gBACxE,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC;gBAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE,CAAC;aAChE,CAAC;YAEF,OAAO,KAAK,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;;AA3CD;;GAEG;AACW,UAAE,GAAW,SAAS,CAAC","sourcesContent":["import type { EventProcessor, Integration, Package, SdkInfo as SdkInfoType } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { SDK_NAME, SDK_PACKAGE_NAME, SDK_VERSION } from '../version';\nimport { NATIVE } from '../wrapper';\n\ntype DefaultSdkInfo = Pick<Required<SdkInfoType>, 'name' | 'packages' | 'version'>;\n\nexport const defaultSdkInfo: DefaultSdkInfo = {\n  name: SDK_NAME,\n  packages: [\n    {\n      name: SDK_PACKAGE_NAME,\n      version: SDK_VERSION,\n    },\n  ],\n  version: SDK_VERSION,\n};\n\n/** Default SdkInfo instrumentation */\nexport class SdkInfo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'SdkInfo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = SdkInfo.id;\n\n  private _nativeSdkPackage: Package | null = null;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (e: EventProcessor) => void): void {\n    addGlobalEventProcessor(async event => {\n      // The native SDK info package here is only used on iOS as `beforeSend` is not called on `captureEnvelope`.\n      // this._nativeSdkInfo should be defined a following time so this call won't always be awaited.\n      if (NATIVE.platform === 'ios' && this._nativeSdkPackage === null) {\n        try {\n          this._nativeSdkPackage = await NATIVE.fetchNativeSdkInfo();\n        } catch (e) {\n          // If this fails, go ahead as usual as we would rather have the event be sent with a package missing.\n          logger.warn(\n            '[SdkInfo] Native SDK Info retrieval failed...something could be wrong with your Sentry installation:',\n          );\n          logger.warn(e);\n        }\n      }\n\n      event.platform = event.platform || 'javascript';\n      event.sdk = event.sdk || {};\n      event.sdk.name = event.sdk.name || defaultSdkInfo.name;\n      event.sdk.version = event.sdk.version || defaultSdkInfo.version;\n      event.sdk.packages = [\n        // default packages are added by baseclient and should not be added here\n        ...(event.sdk.packages || []),\n        ...((this._nativeSdkPackage && [this._nativeSdkPackage]) || []),\n      ];\n\n      return event;\n    });\n  }\n}\n"]}