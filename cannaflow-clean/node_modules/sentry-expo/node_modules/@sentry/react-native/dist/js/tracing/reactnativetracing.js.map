{"version":3,"file":"reactnativetracing.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnativetracing.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport type { RequestInstrumentationOptions } from '@sentry/browser';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from '@sentry/browser';\nimport type { Hub, IdleTransaction, Transaction } from '@sentry/core';\nimport { getActiveTransaction, getCurrentHub, startIdleTransaction } from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { APP_START_COLD, APP_START_WARM } from '../measurements';\nimport type { NativeAppStartResponse } from '../NativeRNSentry';\nimport type { RoutingInstrumentationInstance } from '../tracing/routingInstrumentation';\nimport { NATIVE } from '../wrapper';\nimport { NativeFramesInstrumentation } from './nativeframes';\nimport { APP_START_COLD as APP_START_COLD_OP, APP_START_WARM as APP_START_WARM_OP, UI_LOAD } from './ops';\nimport { StallTrackingInstrumentation } from './stalltracking';\nimport { onlySampleIfChildSpans } from './transaction';\nimport type { BeforeNavigate, RouteChangeContextData } from './types';\nimport { adjustTransactionDuration, getTimeOriginMilliseconds, isNearToNow } from './utils';\n\nexport interface ReactNativeTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * @deprecated Replaced by idleTimeoutMs\n   */\n  idleTimeout: number;\n\n  /**\n   * @deprecated Replaced by maxTransactionDurationMs\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeoutMs: number;\n\n  /**\n   * The maximum duration (transaction duration + idle timeout) of a transaction\n   * before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in ms.\n   *\n   * Default: 600000\n   */\n  finalTimeoutMs: number;\n\n  /**\n   * The routing instrumentation to be used with the tracing integration.\n   * There is no routing instrumentation if nothing is passed.\n   */\n  routingInstrumentation?: RoutingInstrumentationInstance;\n\n  /**\n   * Does not sample transactions that are from routes that have been seen any more and don't have any spans.\n   * This removes a lot of the clutter as most back navigation transactions are now ignored.\n   *\n   * Default: true\n   */\n  ignoreEmptyBackNavigationTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate: BeforeNavigate;\n\n  /**\n   * Track the app start time by adding measurements to the first route transaction. If there is no routing instrumentation\n   * an app start transaction will be started.\n   *\n   * Default: true\n   */\n  enableAppStartTracking: boolean;\n\n  /**\n   * Track slow/frozen frames from the native layer and adds them as measurements to all transactions.\n   */\n  enableNativeFramesTracking: boolean;\n\n  /**\n   * Track when and how long the JS event loop stalls for. Adds stalls as measurements to all transactions.\n   */\n  enableStallTracking: boolean;\n\n  /**\n   * Trace User Interaction events like touch and gestures.\n   */\n  enableUserInteractionTracing: boolean;\n}\n\nconst defaultReactNativeTracingOptions: ReactNativeTracingOptions = {\n  ...defaultRequestInstrumentationOptions,\n  idleTimeout: 1000,\n  maxTransactionDuration: 600,\n  idleTimeoutMs: 1000,\n  finalTimeoutMs: 600000,\n  ignoreEmptyBackNavigationTransactions: true,\n  beforeNavigate: context => context,\n  enableAppStartTracking: true,\n  enableNativeFramesTracking: true,\n  enableStallTracking: true,\n  enableUserInteractionTracing: false,\n};\n\n/**\n * Tracing integration for React Native.\n */\nexport class ReactNativeTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReactNativeTracing';\n  /** We filter out App starts more than 60s */\n  private static _maxAppStart: number = 60000;\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeTracing.id;\n\n  /** ReactNativeTracing options */\n  public options: ReactNativeTracingOptions;\n\n  public nativeFramesInstrumentation?: NativeFramesInstrumentation;\n  public stallTrackingInstrumentation?: StallTrackingInstrumentation;\n  public useAppStartWithProfiler: boolean = false;\n\n  private _inflightInteractionTransaction?: IdleTransaction;\n  private _getCurrentHub?: () => Hub;\n  private _awaitingAppStartData?: NativeAppStartResponse;\n  private _appStartFinishTimestamp?: number;\n  private _currentRoute?: string;\n\n  public constructor(options: Partial<ReactNativeTracingOptions> = {}) {\n    this.options = {\n      ...defaultReactNativeTracingOptions,\n      ...options,\n      finalTimeoutMs:\n        options.finalTimeoutMs ??\n        // eslint-disable-next-line deprecation/deprecation\n        (typeof options.maxTransactionDuration === 'number'\n          ? // eslint-disable-next-line deprecation/deprecation\n            options.maxTransactionDuration * 1000\n          : undefined) ??\n        defaultReactNativeTracingOptions.finalTimeoutMs,\n      idleTimeoutMs:\n        options.idleTimeoutMs ??\n        // eslint-disable-next-line deprecation/deprecation\n        options.idleTimeout ??\n        defaultReactNativeTracingOptions.idleTimeoutMs,\n    };\n  }\n\n  /**\n   *  Registers routing and request instrumentation.\n   */\n  public setupOnce(\n    // @ts-ignore TODO\n    addGlobalEventProcessor: (callback: EventProcessor) => void,\n    getCurrentHub: () => Hub,\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      traceFetch,\n      traceXHR,\n      // eslint-disable-next-line deprecation/deprecation\n      tracingOrigins,\n      // @ts-ignore TODO\n      shouldCreateSpanForRequest,\n      tracePropagationTargets,\n      routingInstrumentation,\n      enableAppStartTracking,\n      enableNativeFramesTracking,\n      enableStallTracking,\n    } = this.options;\n\n    this._getCurrentHub = getCurrentHub;\n\n    if (enableAppStartTracking) {\n      void this._instrumentAppStart();\n    }\n\n    if (enableNativeFramesTracking) {\n      NATIVE.enableNativeFramesTracking();\n      this.nativeFramesInstrumentation = new NativeFramesInstrumentation(addGlobalEventProcessor, () => {\n        const self = getCurrentHub().getIntegration(ReactNativeTracing);\n\n        if (self) {\n          return !!self.nativeFramesInstrumentation;\n        }\n\n        return false;\n      });\n    } else {\n      NATIVE.disableNativeFramesTracking();\n    }\n\n    if (enableStallTracking) {\n      this.stallTrackingInstrumentation = new StallTrackingInstrumentation();\n    }\n\n    if (routingInstrumentation) {\n      routingInstrumentation.registerRoutingInstrumentation(\n        this._onRouteWillChange.bind(this),\n        this.options.beforeNavigate,\n        this._onConfirmRoute.bind(this),\n      );\n    } else {\n      logger.log('[ReactNativeTracing] Not instrumenting route changes as routingInstrumentation has not been set.');\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n      tracePropagationTargets,\n    });\n  }\n\n  /**\n   * To be called on a transaction start. Can have async methods\n   */\n  public onTransactionStart(transaction: Transaction): void {\n    if (isNearToNow(transaction.startTimestamp)) {\n      // Only if this method is called at or within margin of error to the start timestamp.\n      this.nativeFramesInstrumentation?.onTransactionStart(transaction);\n      this.stallTrackingInstrumentation?.onTransactionStart(transaction);\n    }\n  }\n\n  /**\n   * To be called on a transaction finish. Cannot have async methods.\n   */\n  public onTransactionFinish(transaction: Transaction, endTimestamp?: number): void {\n    this.nativeFramesInstrumentation?.onTransactionFinish(transaction);\n    this.stallTrackingInstrumentation?.onTransactionFinish(transaction, endTimestamp);\n  }\n\n  /**\n   * Called by the ReactNativeProfiler component on first component mount.\n   */\n  public onAppStartFinish(endTimestamp: number): void {\n    this._appStartFinishTimestamp = endTimestamp;\n  }\n\n  /**\n   * Starts a new transaction for a user interaction.\n   * @param userInteractionId Consists of `op` representation UI Event and `elementId` unique element identifier on current screen.\n   */\n  public startUserInteractionTransaction(userInteractionId: {\n    elementId: string | undefined;\n    op: string;\n  }): TransactionType | undefined {\n    const { elementId, op } = userInteractionId;\n    if (!this.options.enableUserInteractionTracing) {\n      logger.log('[ReactNativeTracing] User Interaction Tracing is disabled.');\n      return;\n    }\n    if (!this.options.routingInstrumentation) {\n      logger.error(\n        '[ReactNativeTracing] User Interaction Tracing is not working because no routing instrumentation is set.',\n      );\n      return;\n    }\n    if (!elementId) {\n      logger.log('[ReactNativeTracing] User Interaction Tracing can not create transaction with undefined elementId.');\n      return;\n    }\n    if (!this._currentRoute) {\n      logger.log('[ReactNativeTracing] User Interaction Tracing can not create transaction without a current route.');\n      return;\n    }\n\n    const hub = this._getCurrentHub?.() || getCurrentHub();\n    const activeTransaction = getActiveTransaction(hub);\n    const activeTransactionIsNotInteraction =\n      activeTransaction?.spanId !== this._inflightInteractionTransaction?.spanId;\n    if (activeTransaction && activeTransactionIsNotInteraction) {\n      logger.warn(\n        `[ReactNativeTracing] Did not create ${op} transaction because active transaction ${activeTransaction.name} exists on the scope.`,\n      );\n      return;\n    }\n\n    const { idleTimeoutMs, finalTimeoutMs } = this.options;\n\n    if (this._inflightInteractionTransaction) {\n      this._inflightInteractionTransaction.cancelIdleTimeout(undefined, { restartOnChildSpanChange: false });\n      this._inflightInteractionTransaction = undefined;\n    }\n\n    const name = `${this._currentRoute}.${elementId}`;\n    const context: TransactionContext = {\n      name,\n      op,\n      trimEnd: true,\n    };\n    this._inflightInteractionTransaction = startIdleTransaction(hub, context, idleTimeoutMs, finalTimeoutMs, true);\n    this._inflightInteractionTransaction.registerBeforeFinishCallback((transaction: IdleTransaction) => {\n      this._inflightInteractionTransaction = undefined;\n      this.onTransactionFinish(transaction);\n    });\n    this._inflightInteractionTransaction.registerBeforeFinishCallback(onlySampleIfChildSpans);\n    this.onTransactionStart(this._inflightInteractionTransaction);\n    logger.log(`[ReactNativeTracing] User Interaction Tracing Created ${op} transaction ${name}.`);\n    return this._inflightInteractionTransaction;\n  }\n\n  /**\n   * Instruments the app start measurements on the first route transaction.\n   * Starts a route transaction if there isn't routing instrumentation.\n   */\n  private async _instrumentAppStart(): Promise<void> {\n    if (!this.options.enableAppStartTracking || !NATIVE.enableNative) {\n      return;\n    }\n\n    const appStart = await NATIVE.fetchNativeAppStart();\n\n    if (!appStart || appStart.didFetchAppStart) {\n      return;\n    }\n\n    if (!this.useAppStartWithProfiler) {\n      this._appStartFinishTimestamp = getTimeOriginMilliseconds() / 1000;\n    }\n\n    if (this.options.routingInstrumentation) {\n      this._awaitingAppStartData = appStart;\n    } else {\n      const appStartTimeSeconds = appStart.appStartTime / 1000;\n\n      const idleTransaction = this._createRouteTransaction({\n        name: 'App Start',\n        op: UI_LOAD,\n        startTimestamp: appStartTimeSeconds,\n      });\n\n      if (idleTransaction) {\n        this._addAppStartData(idleTransaction, appStart);\n      }\n    }\n  }\n\n  /**\n   * Adds app start measurements and starts a child span on a transaction.\n   */\n  private _addAppStartData(transaction: IdleTransaction, appStart: NativeAppStartResponse): void {\n    if (!this._appStartFinishTimestamp) {\n      logger.warn('App start was never finished.');\n      return;\n    }\n\n    const appStartTimeSeconds = appStart.appStartTime / 1000;\n\n    const op = appStart.isColdStart ? APP_START_COLD_OP : APP_START_WARM_OP;\n    transaction.startChild({\n      description: appStart.isColdStart ? 'Cold App Start' : 'Warm App Start',\n      op,\n      startTimestamp: appStartTimeSeconds,\n      endTimestamp: this._appStartFinishTimestamp,\n    });\n\n    const appStartDurationMilliseconds = this._appStartFinishTimestamp * 1000 - appStart.appStartTime;\n\n    // we filter out app start more than 60s.\n    // this could be due to many different reasons.\n    // we've seen app starts with hours, days and even months.\n    if (appStartDurationMilliseconds >= ReactNativeTracing._maxAppStart) {\n      return;\n    }\n\n    const measurement = appStart.isColdStart ? APP_START_COLD : APP_START_WARM;\n    transaction.setMeasurement(measurement, appStartDurationMilliseconds, 'millisecond');\n  }\n\n  /** To be called when the route changes, but BEFORE the components of the new route mount. */\n  private _onRouteWillChange(context: TransactionContext): TransactionType | undefined {\n    return this._createRouteTransaction(context);\n  }\n\n  /**\n   * Creates a breadcrumb and sets the current route as a tag.\n   */\n  private _onConfirmRoute(context: TransactionContext): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._currentRoute = context.data?.route?.name;\n\n    this._getCurrentHub?.().configureScope(scope => {\n      if (context.data) {\n        const contextData = context.data as RouteChangeContextData;\n\n        scope.addBreadcrumb({\n          category: 'navigation',\n          type: 'navigation',\n          // We assume that context.name is the name of the route.\n          message: `Navigation to ${context.name}`,\n          data: {\n            from: contextData.previousRoute?.name,\n            to: contextData.route.name,\n          },\n        });\n      }\n\n      scope.setTag('routing.route.name', context.name);\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): IdleTransaction | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(`[ReactNativeTracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    if (this._inflightInteractionTransaction) {\n      logger.log(\n        `[ReactNativeTracing] Canceling ${this._inflightInteractionTransaction.op} transaction because navigation ${context.op}.`,\n      );\n      this._inflightInteractionTransaction.setStatus('cancelled');\n      this._inflightInteractionTransaction.finish();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { idleTimeoutMs, finalTimeoutMs } = this.options;\n\n    const expandedContext = {\n      ...context,\n      trimEnd: true,\n    };\n\n    const hub = this._getCurrentHub();\n    const idleTransaction = startIdleTransaction(hub as Hub, expandedContext, idleTimeoutMs, finalTimeoutMs, true);\n\n    this.onTransactionStart(idleTransaction);\n\n    logger.log(`[ReactNativeTracing] Starting ${context.op} transaction \"${context.name}\" on scope`);\n\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this.onTransactionFinish(transaction, endTimestamp);\n    });\n\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      if (this.options.enableAppStartTracking && this._awaitingAppStartData) {\n        transaction.startTimestamp = this._awaitingAppStartData.appStartTime / 1000;\n        transaction.op = 'ui.load';\n\n        this._addAppStartData(transaction, this._awaitingAppStartData);\n\n        this._awaitingAppStartData = undefined;\n      }\n    });\n\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      adjustTransactionDuration(finalTimeoutMs, transaction, endTimestamp);\n    });\n\n    if (this.options.ignoreEmptyBackNavigationTransactions) {\n      idleTransaction.registerBeforeFinishCallback(transaction => {\n        if (\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          transaction.data?.route?.hasBeenSeen &&\n          (!transaction.spanRecorder ||\n            transaction.spanRecorder.spans.filter(span => span.spanId !== transaction.spanId).length === 0)\n        ) {\n          logger.log(\n            '[ReactNativeTracing] Not sampling transaction as route has been seen before. Pass ignoreEmptyBackNavigationTransactions = false to disable this feature.',\n          );\n          // Route has been seen before and has no child spans.\n          transaction.sampled = false;\n        }\n      });\n    }\n\n    return idleTransaction;\n  }\n}\n"]}